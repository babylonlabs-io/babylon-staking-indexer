// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	client "github.com/babylonlabs-io/staking-queue-client/client"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// EventConsumer is an autogenerated mock type for the EventConsumer type
type EventConsumer struct {
	mock.Mock
}

// PushActiveStakingEvent provides a mock function with given fields: ctx, ev
func (_m *EventConsumer) PushActiveStakingEvent(ctx context.Context, ev *client.StakingEvent) error {
	ret := _m.Called(ctx, ev)

	if len(ret) == 0 {
		panic("no return value specified for PushActiveStakingEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.StakingEvent) error); ok {
		r0 = rf(ctx, ev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PushUnbondingStakingEvent provides a mock function with given fields: ctx, ev
func (_m *EventConsumer) PushUnbondingStakingEvent(ctx context.Context, ev *client.StakingEvent) error {
	ret := _m.Called(ctx, ev)

	if len(ret) == 0 {
		panic("no return value specified for PushUnbondingStakingEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.StakingEvent) error); ok {
		r0 = rf(ctx, ev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PushWithdrawableStakingEvent provides a mock function with given fields: ctx, ev
func (_m *EventConsumer) PushWithdrawableStakingEvent(ctx context.Context, ev *client.StakingEvent) error {
	ret := _m.Called(ctx, ev)

	if len(ret) == 0 {
		panic("no return value specified for PushWithdrawableStakingEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.StakingEvent) error); ok {
		r0 = rf(ctx, ev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PushWithdrawnStakingEvent provides a mock function with given fields: ctx, ev
func (_m *EventConsumer) PushWithdrawnStakingEvent(ctx context.Context, ev *client.StakingEvent) error {
	ret := _m.Called(ctx, ev)

	if len(ret) == 0 {
		panic("no return value specified for PushWithdrawnStakingEvent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *client.StakingEvent) error); ok {
		r0 = rf(ctx, ev)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with no fields
func (_m *EventConsumer) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with no fields
func (_m *EventConsumer) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewEventConsumer creates a new instance of EventConsumer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventConsumer(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventConsumer {
	mock := &EventConsumer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
